// Uncomment after timeout is added to test runner
// p({"class":"foam.dao.RoutingJournalTest","id":"RoutingJournalTest","description":"Tests the RoutingJournal"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
p({"class":"foam.dao.EnabledAwareDAOTest","id":"EnabledAwareDAOTest"})

p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","status":2,"code":"of = foam.nanos.auth.User.getOwnClassInfo();\n\ndao = new foam.dao.FixedSizeDAO.Builder(x)\n  .setDelegate(new foam.dao.MDAO(of))\n  .setComparator(foam.mlang.MLang.DESC(of.getAxiomByName(\"lastModified\")))\n  .setSize(10)\n  .build();\n\nlong startTime = new java.util.Date().getTime();\nfor ( int i = 100 ; i <= 200 ; i++ ) {\n    dao.put(new foam.nanos.auth.User.Builder(x)\n      .setId(i)\n      .setFirstName(\"Test \" + i)\n      .setLastModified(new java.util.Date(startTime + i))\n      .build());\n}\n\nprint(dao.select(new foam.mlang.sink.Count()).getValue());\n\nprint(dao.select(foam.mlang.MLang.MIN(of.getAxiomByName(\"firstName\"))));\nprint(dao.select(foam.mlang.MLang.MAX(of.getAxiomByName(\"firstName\"))));","output":""})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","status":2,"code":"of = foam.nanos.auth.User.getOwnClassInfo();\n\ndao = new foam.dao.FixedSizeDAO.Builder(x)\n  .setDelegate(new foam.dao.MDAO(of))\n  .setComparator(foam.mlang.MLang.DESC(of.getAxiomByName(\"lastModified\")))\n  .setPredicate(foam.mlang.MLang.TRUE)\n  .setSize(10)\n  .build();\n\nlong startTime = new java.util.Date().getTime();\nfor ( int i = 100 ; i <= 200 ; i++ ) {\n    dao.put(new foam.nanos.auth.User.Builder(x)\n      .setId(i)\n      .setFirstName(\"Test \" + i)\n      .setLastModified(new java.util.Date(startTime + i))\n      .build());\n}\n\nprint(dao.select(new foam.mlang.sink.Count()).getValue());\n\nprint(dao.select(foam.mlang.MLang.MIN(of.getAxiomByName(\"firstName\"))));\nprint(dao.select(foam.mlang.MLang.MAX(of.getAxiomByName(\"firstName\"))));","output":""})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","failed":0,"lastRun":"2019-09-11T18:35:15.399Z","lastDuration":138,"status":1,"output":"10\nvalue: Test 191, arg1: foam.nanos.auth.User.firstName\nvalue: Test 200, arg1: foam.nanos.auth.User.firstName\n"})
p({ class: 'foam.dao.CopyOnWriteDAOJavaTest', id: 'foam.dao.CopyOnWriteDAOJavaTest' });
